// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  TEACHER
  STUDENT //USER
}

enum Status {
  DRAFT
  PUBLISHED
}

model Post {
  id        String  @id @default(uuid())
  status    Status
  title     String  @db.VarChar(255)
  content   String?
  published Boolean @default(false)
  authorId  String
  User      User    @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
}

model Profile {
  id          String  @id @default(uuid())
  bio         String? @default("No Info.")
  displayname String? @default("")
  avatar      String? @default("")
  userId      String  @unique
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[]
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  username      String
  password      String?
  phone         String?
  role          Role      @default(STUDENT)
  posts         Post[]
  accounts      Account[]
  profile       Profile?

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, username])
  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
